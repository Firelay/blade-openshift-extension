/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.nio.file.*;

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

   flatDir {
       dirs System.getProperty("user.home") + '/.blade'
   }
}


task installBladeExtension(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into System.getProperty("user.home") + '/.blade/extensions' 
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

	compile group: "org.apache.commons", name: "commons-lang3", version: "3.4"

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

	Path newLink = Paths.get(System.getProperty("user.home") + '/.blade/blade.jar')  
	 
	boolean bladeJarExists = Files.exists(newLink);
	if (!bladeJarExists) {
	
	    String bladePath = System.getProperty("user.home") + '/jpm/repo/'
	    
	    String bladeCommandPath = System.getProperty("user.home") + '/jpm/commands/blade/'
	    
	    String regex = "dependencies\\\":\\[\\\"(.*)\\\"\\]"
	    
	    Pattern pattern = Pattern.compile(regex);
	    
	    String s = new File(bladeCommandPath).text
		Matcher matcher = pattern.matcher(s)
	    
		String result = null
		while (matcher.find()) {   
		    result = matcher.group(1)
		}
		
		Path target = Paths.get(bladePath + result)
		try {
		    Files.createSymbolicLink(newLink, target);
		} catch (IOException x) {
		    System.err.println(x);
		} catch (UnsupportedOperationException x) {
		    // Some file systems do not support symbolic links.
		    System.err.println(x);
		}
		
	}
	
   compile name: 'blade'
	
	
}
//version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
